// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/radixapi/client/application/application_client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	application "github.com/equinor/radix-log-api/pkg/radixapi/client/application"
	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
)

// MockRadixApiApplicationClient is a mock of ClientService interface.
type MockRadixApiApplicationClient struct {
	ctrl     *gomock.Controller
	recorder *MockRadixApiApplicationClientMockRecorder
}

// MockRadixApiApplicationClientMockRecorder is the mock recorder for MockRadixApiApplicationClient.
type MockRadixApiApplicationClientMockRecorder struct {
	mock *MockRadixApiApplicationClient
}

// NewMockRadixApiApplicationClient creates a new mock instance.
func NewMockRadixApiApplicationClient(ctrl *gomock.Controller) *MockRadixApiApplicationClient {
	mock := &MockRadixApiApplicationClient{ctrl: ctrl}
	mock.recorder = &MockRadixApiApplicationClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRadixApiApplicationClient) EXPECT() *MockRadixApiApplicationClientMockRecorder {
	return m.recorder
}

// ChangeRegistrationDetails mocks base method.
func (m *MockRadixApiApplicationClient) ChangeRegistrationDetails(params *application.ChangeRegistrationDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.ChangeRegistrationDetailsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ChangeRegistrationDetails", varargs...)
	ret0, _ := ret[0].(*application.ChangeRegistrationDetailsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeRegistrationDetails indicates an expected call of ChangeRegistrationDetails.
func (mr *MockRadixApiApplicationClientMockRecorder) ChangeRegistrationDetails(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeRegistrationDetails", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).ChangeRegistrationDetails), varargs...)
}

// DeleteApplication mocks base method.
func (m *MockRadixApiApplicationClient) DeleteApplication(params *application.DeleteApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.DeleteApplicationOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteApplication", varargs...)
	ret0, _ := ret[0].(*application.DeleteApplicationOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockRadixApiApplicationClientMockRecorder) DeleteApplication(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).DeleteApplication), varargs...)
}

// DisableApplicationAlerting mocks base method.
func (m *MockRadixApiApplicationClient) DisableApplicationAlerting(params *application.DisableApplicationAlertingParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.DisableApplicationAlertingOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DisableApplicationAlerting", varargs...)
	ret0, _ := ret[0].(*application.DisableApplicationAlertingOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DisableApplicationAlerting indicates an expected call of DisableApplicationAlerting.
func (mr *MockRadixApiApplicationClientMockRecorder) DisableApplicationAlerting(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableApplicationAlerting", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).DisableApplicationAlerting), varargs...)
}

// EnableApplicationAlerting mocks base method.
func (m *MockRadixApiApplicationClient) EnableApplicationAlerting(params *application.EnableApplicationAlertingParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.EnableApplicationAlertingOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EnableApplicationAlerting", varargs...)
	ret0, _ := ret[0].(*application.EnableApplicationAlertingOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableApplicationAlerting indicates an expected call of EnableApplicationAlerting.
func (mr *MockRadixApiApplicationClientMockRecorder) EnableApplicationAlerting(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableApplicationAlerting", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).EnableApplicationAlerting), varargs...)
}

// GetApplication mocks base method.
func (m *MockRadixApiApplicationClient) GetApplication(params *application.GetApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.GetApplicationOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplication", varargs...)
	ret0, _ := ret[0].(*application.GetApplicationOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockRadixApiApplicationClientMockRecorder) GetApplication(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).GetApplication), varargs...)
}

// GetApplicationAlertingConfig mocks base method.
func (m *MockRadixApiApplicationClient) GetApplicationAlertingConfig(params *application.GetApplicationAlertingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.GetApplicationAlertingConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationAlertingConfig", varargs...)
	ret0, _ := ret[0].(*application.GetApplicationAlertingConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationAlertingConfig indicates an expected call of GetApplicationAlertingConfig.
func (mr *MockRadixApiApplicationClientMockRecorder) GetApplicationAlertingConfig(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationAlertingConfig", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).GetApplicationAlertingConfig), varargs...)
}

// GetBuildSecrets mocks base method.
func (m *MockRadixApiApplicationClient) GetBuildSecrets(params *application.GetBuildSecretsParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.GetBuildSecretsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetBuildSecrets", varargs...)
	ret0, _ := ret[0].(*application.GetBuildSecretsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildSecrets indicates an expected call of GetBuildSecrets.
func (mr *MockRadixApiApplicationClientMockRecorder) GetBuildSecrets(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildSecrets", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).GetBuildSecrets), varargs...)
}

// GetDeployments mocks base method.
func (m *MockRadixApiApplicationClient) GetDeployments(params *application.GetDeploymentsParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.GetDeploymentsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDeployments", varargs...)
	ret0, _ := ret[0].(*application.GetDeploymentsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeployments indicates an expected call of GetDeployments.
func (mr *MockRadixApiApplicationClientMockRecorder) GetDeployments(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeployments", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).GetDeployments), varargs...)
}

// GetPrivateImageHubs mocks base method.
func (m *MockRadixApiApplicationClient) GetPrivateImageHubs(params *application.GetPrivateImageHubsParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.GetPrivateImageHubsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPrivateImageHubs", varargs...)
	ret0, _ := ret[0].(*application.GetPrivateImageHubsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateImageHubs indicates an expected call of GetPrivateImageHubs.
func (mr *MockRadixApiApplicationClientMockRecorder) GetPrivateImageHubs(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImageHubs", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).GetPrivateImageHubs), varargs...)
}

// IsDeployKeyValid mocks base method.
func (m *MockRadixApiApplicationClient) IsDeployKeyValid(params *application.IsDeployKeyValidParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.IsDeployKeyValidOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "IsDeployKeyValid", varargs...)
	ret0, _ := ret[0].(*application.IsDeployKeyValidOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsDeployKeyValid indicates an expected call of IsDeployKeyValid.
func (mr *MockRadixApiApplicationClientMockRecorder) IsDeployKeyValid(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDeployKeyValid", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).IsDeployKeyValid), varargs...)
}

// ListPipelines mocks base method.
func (m *MockRadixApiApplicationClient) ListPipelines(params *application.ListPipelinesParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.ListPipelinesOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListPipelines", varargs...)
	ret0, _ := ret[0].(*application.ListPipelinesOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPipelines indicates an expected call of ListPipelines.
func (mr *MockRadixApiApplicationClientMockRecorder) ListPipelines(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPipelines", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).ListPipelines), varargs...)
}

// ModifyRegistrationDetails mocks base method.
func (m *MockRadixApiApplicationClient) ModifyRegistrationDetails(params *application.ModifyRegistrationDetailsParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.ModifyRegistrationDetailsOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModifyRegistrationDetails", varargs...)
	ret0, _ := ret[0].(*application.ModifyRegistrationDetailsOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyRegistrationDetails indicates an expected call of ModifyRegistrationDetails.
func (mr *MockRadixApiApplicationClientMockRecorder) ModifyRegistrationDetails(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyRegistrationDetails", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).ModifyRegistrationDetails), varargs...)
}

// RegenerateDeployKey mocks base method.
func (m *MockRadixApiApplicationClient) RegenerateDeployKey(params *application.RegenerateDeployKeyParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.RegenerateDeployKeyOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegenerateDeployKey", varargs...)
	ret0, _ := ret[0].(*application.RegenerateDeployKeyOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateDeployKey indicates an expected call of RegenerateDeployKey.
func (mr *MockRadixApiApplicationClientMockRecorder) RegenerateDeployKey(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateDeployKey", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).RegenerateDeployKey), varargs...)
}

// RegenerateMachineUserToken mocks base method.
func (m *MockRadixApiApplicationClient) RegenerateMachineUserToken(params *application.RegenerateMachineUserTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.RegenerateMachineUserTokenOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RegenerateMachineUserToken", varargs...)
	ret0, _ := ret[0].(*application.RegenerateMachineUserTokenOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegenerateMachineUserToken indicates an expected call of RegenerateMachineUserToken.
func (mr *MockRadixApiApplicationClientMockRecorder) RegenerateMachineUserToken(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegenerateMachineUserToken", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).RegenerateMachineUserToken), varargs...)
}

// RestartApplication mocks base method.
func (m *MockRadixApiApplicationClient) RestartApplication(params *application.RestartApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.RestartApplicationOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RestartApplication", varargs...)
	ret0, _ := ret[0].(*application.RestartApplicationOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartApplication indicates an expected call of RestartApplication.
func (mr *MockRadixApiApplicationClientMockRecorder) RestartApplication(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartApplication", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).RestartApplication), varargs...)
}

// SetTransport mocks base method.
func (m *MockRadixApiApplicationClient) SetTransport(transport runtime.ClientTransport) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTransport", transport)
}

// SetTransport indicates an expected call of SetTransport.
func (mr *MockRadixApiApplicationClientMockRecorder) SetTransport(transport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTransport", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).SetTransport), transport)
}

// StartApplication mocks base method.
func (m *MockRadixApiApplicationClient) StartApplication(params *application.StartApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.StartApplicationOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartApplication", varargs...)
	ret0, _ := ret[0].(*application.StartApplicationOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartApplication indicates an expected call of StartApplication.
func (mr *MockRadixApiApplicationClientMockRecorder) StartApplication(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartApplication", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).StartApplication), varargs...)
}

// StopApplication mocks base method.
func (m *MockRadixApiApplicationClient) StopApplication(params *application.StopApplicationParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.StopApplicationOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StopApplication", varargs...)
	ret0, _ := ret[0].(*application.StopApplicationOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopApplication indicates an expected call of StopApplication.
func (mr *MockRadixApiApplicationClientMockRecorder) StopApplication(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopApplication", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).StopApplication), varargs...)
}

// TriggerPipelineBuild mocks base method.
func (m *MockRadixApiApplicationClient) TriggerPipelineBuild(params *application.TriggerPipelineBuildParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.TriggerPipelineBuildOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerPipelineBuild", varargs...)
	ret0, _ := ret[0].(*application.TriggerPipelineBuildOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerPipelineBuild indicates an expected call of TriggerPipelineBuild.
func (mr *MockRadixApiApplicationClientMockRecorder) TriggerPipelineBuild(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerPipelineBuild", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).TriggerPipelineBuild), varargs...)
}

// TriggerPipelineBuildDeploy mocks base method.
func (m *MockRadixApiApplicationClient) TriggerPipelineBuildDeploy(params *application.TriggerPipelineBuildDeployParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.TriggerPipelineBuildDeployOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerPipelineBuildDeploy", varargs...)
	ret0, _ := ret[0].(*application.TriggerPipelineBuildDeployOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerPipelineBuildDeploy indicates an expected call of TriggerPipelineBuildDeploy.
func (mr *MockRadixApiApplicationClientMockRecorder) TriggerPipelineBuildDeploy(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerPipelineBuildDeploy", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).TriggerPipelineBuildDeploy), varargs...)
}

// TriggerPipelineDeploy mocks base method.
func (m *MockRadixApiApplicationClient) TriggerPipelineDeploy(params *application.TriggerPipelineDeployParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.TriggerPipelineDeployOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerPipelineDeploy", varargs...)
	ret0, _ := ret[0].(*application.TriggerPipelineDeployOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerPipelineDeploy indicates an expected call of TriggerPipelineDeploy.
func (mr *MockRadixApiApplicationClientMockRecorder) TriggerPipelineDeploy(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerPipelineDeploy", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).TriggerPipelineDeploy), varargs...)
}

// TriggerPipelinePromote mocks base method.
func (m *MockRadixApiApplicationClient) TriggerPipelinePromote(params *application.TriggerPipelinePromoteParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.TriggerPipelinePromoteOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TriggerPipelinePromote", varargs...)
	ret0, _ := ret[0].(*application.TriggerPipelinePromoteOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TriggerPipelinePromote indicates an expected call of TriggerPipelinePromote.
func (mr *MockRadixApiApplicationClientMockRecorder) TriggerPipelinePromote(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TriggerPipelinePromote", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).TriggerPipelinePromote), varargs...)
}

// UpdateApplicationAlertingConfig mocks base method.
func (m *MockRadixApiApplicationClient) UpdateApplicationAlertingConfig(params *application.UpdateApplicationAlertingConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.UpdateApplicationAlertingConfigOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateApplicationAlertingConfig", varargs...)
	ret0, _ := ret[0].(*application.UpdateApplicationAlertingConfigOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplicationAlertingConfig indicates an expected call of UpdateApplicationAlertingConfig.
func (mr *MockRadixApiApplicationClientMockRecorder) UpdateApplicationAlertingConfig(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplicationAlertingConfig", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).UpdateApplicationAlertingConfig), varargs...)
}

// UpdateBuildSecretsSecretValue mocks base method.
func (m *MockRadixApiApplicationClient) UpdateBuildSecretsSecretValue(params *application.UpdateBuildSecretsSecretValueParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.UpdateBuildSecretsSecretValueOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBuildSecretsSecretValue", varargs...)
	ret0, _ := ret[0].(*application.UpdateBuildSecretsSecretValueOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBuildSecretsSecretValue indicates an expected call of UpdateBuildSecretsSecretValue.
func (mr *MockRadixApiApplicationClientMockRecorder) UpdateBuildSecretsSecretValue(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuildSecretsSecretValue", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).UpdateBuildSecretsSecretValue), varargs...)
}

// UpdatePrivateImageHubsSecretValue mocks base method.
func (m *MockRadixApiApplicationClient) UpdatePrivateImageHubsSecretValue(params *application.UpdatePrivateImageHubsSecretValueParams, authInfo runtime.ClientAuthInfoWriter, opts ...application.ClientOption) (*application.UpdatePrivateImageHubsSecretValueOK, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{params, authInfo}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdatePrivateImageHubsSecretValue", varargs...)
	ret0, _ := ret[0].(*application.UpdatePrivateImageHubsSecretValueOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePrivateImageHubsSecretValue indicates an expected call of UpdatePrivateImageHubsSecretValue.
func (mr *MockRadixApiApplicationClientMockRecorder) UpdatePrivateImageHubsSecretValue(params, authInfo interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{params, authInfo}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePrivateImageHubsSecretValue", reflect.TypeOf((*MockRadixApiApplicationClient)(nil).UpdatePrivateImageHubsSecretValue), varargs...)
}
