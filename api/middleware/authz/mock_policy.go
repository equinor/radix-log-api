// Code generated by MockGen. DO NOT EDIT.
// Source: ./api/middleware/authz/policy.go

// Package authz is a generated GoMock package.
package authz

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPolicy is a mock of Policy interface.
type MockPolicy struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyMockRecorder
}

// MockPolicyMockRecorder is the mock recorder for MockPolicy.
type MockPolicyMockRecorder struct {
	mock *MockPolicy
}

// NewMockPolicy creates a new mock instance.
func NewMockPolicy(ctrl *gomock.Controller) *MockPolicy {
	mock := &MockPolicy{ctrl: ctrl}
	mock.recorder = &MockPolicyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicy) EXPECT() *MockPolicyMockRecorder {
	return m.recorder
}

// ValidatePolicy mocks base method.
func (m *MockPolicy) ValidatePolicy(ctx *AuthorizationContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidatePolicy", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidatePolicy indicates an expected call of ValidatePolicy.
func (mr *MockPolicyMockRecorder) ValidatePolicy(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidatePolicy", reflect.TypeOf((*MockPolicy)(nil).ValidatePolicy), ctx)
}

// MockPolicyConfiguration is a mock of PolicyConfiguration interface.
type MockPolicyConfiguration struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyConfigurationMockRecorder
}

// MockPolicyConfigurationMockRecorder is the mock recorder for MockPolicyConfiguration.
type MockPolicyConfigurationMockRecorder struct {
	mock *MockPolicyConfiguration
}

// NewMockPolicyConfiguration creates a new mock instance.
func NewMockPolicyConfiguration(ctrl *gomock.Controller) *MockPolicyConfiguration {
	mock := &MockPolicyConfiguration{ctrl: ctrl}
	mock.recorder = &MockPolicyConfigurationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyConfiguration) EXPECT() *MockPolicyConfigurationMockRecorder {
	return m.recorder
}

// AddRequirement mocks base method.
func (m *MockPolicyConfiguration) AddRequirement(arg0 Requirement) PolicyConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRequirement", arg0)
	ret0, _ := ret[0].(PolicyConfiguration)
	return ret0
}

// AddRequirement indicates an expected call of AddRequirement.
func (mr *MockPolicyConfigurationMockRecorder) AddRequirement(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRequirement", reflect.TypeOf((*MockPolicyConfiguration)(nil).AddRequirement), arg0)
}

// RequireAuthenticatedUser mocks base method.
func (m *MockPolicyConfiguration) RequireAuthenticatedUser() PolicyConfiguration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequireAuthenticatedUser")
	ret0, _ := ret[0].(PolicyConfiguration)
	return ret0
}

// RequireAuthenticatedUser indicates an expected call of RequireAuthenticatedUser.
func (mr *MockPolicyConfigurationMockRecorder) RequireAuthenticatedUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireAuthenticatedUser", reflect.TypeOf((*MockPolicyConfiguration)(nil).RequireAuthenticatedUser))
}
