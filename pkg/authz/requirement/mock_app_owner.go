// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/authz/requirement/app_owner.go

// Package requirement is a generated GoMock package.
package requirement

import (
	context "context"
	reflect "reflect"

	models "github.com/equinor/radix-log-api/pkg/radixapi/models"
	gomock "github.com/golang/mock/gomock"
)

// MockRadixAppProvider is a mock of RadixAppProvider interface.
type MockRadixAppProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRadixAppProviderMockRecorder
}

// MockRadixAppProviderMockRecorder is the mock recorder for MockRadixAppProvider.
type MockRadixAppProviderMockRecorder struct {
	mock *MockRadixAppProvider
}

// NewMockRadixAppProvider creates a new mock instance.
func NewMockRadixAppProvider(ctrl *gomock.Controller) *MockRadixAppProvider {
	mock := &MockRadixAppProvider{ctrl: ctrl}
	mock.recorder = &MockRadixAppProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRadixAppProvider) EXPECT() *MockRadixAppProviderMockRecorder {
	return m.recorder
}

// GetApplication mocks base method.
func (m *MockRadixAppProvider) GetApplication(ctx context.Context, bearerToken, appName string) (*models.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", ctx, bearerToken, appName)
	ret0, _ := ret[0].(*models.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockRadixAppProviderMockRecorder) GetApplication(ctx, bearerToken, appName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockRadixAppProvider)(nil).GetApplication), ctx, bearerToken, appName)
}
